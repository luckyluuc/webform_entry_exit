{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // Eigener Hook zur Auswertung des Inputs der Formularfelder und Reset auf leer nach Absenden\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    // fehlerhafter Input\n    valueChangeHandler,\n    // Ver채nderung am Objekt\n    reset // Eingabewerte zur체cksetzen nach Absenden\n\n  };\n};\n\n_s(useInput, \"jFKbDuHD29x3PnGDGoWD/0eygag=\");\n\nexport default useInput;","map":{"version":3,"sources":["D:/code/webform_entry_exit/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","valueIsValid","hasError","valueChangeHandler","event","target","value","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMK,YAAY,GAAGH,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMG,QAAQ,GAAG,CAACD,YAAlB;;AAEA,QAAME,kBAAkB,GAAGC,KAAK,IAAI;AAChCJ,IAAAA,eAAe,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,KAAK,GAAG,MAAM;AAChBP,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAFD;;AAIA,SAAO;AACHM,IAAAA,KAAK,EAAEP,YADJ;AAEHS,IAAAA,OAAO,EAAEP,YAFN;AAGHC,IAAAA,QAHG;AAGO;AACVC,IAAAA,kBAJG;AAIiB;AACpBI,IAAAA,KALG,CAKI;;AALJ,GAAP;AAOH,CArBD;;GAAMV,Q;;AAuBN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\n// Eigener Hook zur Auswertung des Inputs der Formularfelder und Reset auf leer nach Absenden\r\n\r\nconst useInput = (validateValue) => {\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    \r\n    const valueIsValid = validateValue(enteredValue);\r\n    const hasError = !valueIsValid;\r\n\r\n    const valueChangeHandler = event => {\r\n        setEnteredValue(event.target.value);\r\n    };\r\n    \r\n    const reset = () => {\r\n        setEnteredValue('');\r\n    }\r\n\r\n    return {\r\n        value: enteredValue, \r\n        isValid: valueIsValid,\r\n        hasError, // fehlerhafter Input\r\n        valueChangeHandler, // Ver채nderung am Objekt\r\n        reset, // Eingabewerte zur체cksetzen nach Absenden\r\n    };\r\n};\r\n\r\nexport default useInput;"]},"metadata":{},"sourceType":"module"}